##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
#
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://www.nginx.com/resources/wiki/start/
# http://nginx.com/resources/admin-guide
#
# In most cases, it is assumed that users will remove this file from sites-enabled/
# and write their own configuration files while leaving this file as a reference
# in sites-available/.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	#listen 443 ssl default_server;
	#listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	#include snippets/snakeoil.conf;

	# Server name
	#
	# Our default server_name is an invalid hostname that won't be matched
	# by any valid requests. Any server_name defined in another configuration
	# will supercede ours and take precedence.
	#
	# If additional configuration files are created, it would be a good idea
	# to include the 'default_server' token on one of them as well.
	#
	# See: http://ngx.cc/r/server_name
	#
	server_name _;

	root /var/www/html;

	index index.html index.htm index.nginx-debian.html;

	location / {
		# This represents the default try_files directive.
		#
		# $uri serves a static regular file, or symlink, if the root dir
		# plus the exact requested path ($uri) exists.
		#
		# $uri/ has two functions, if a directory named root + $uri exists:
		#   1. If the requested path doesn't end in /, nginx issues a 301
		#      with a slash (/) appended.
		#   2. If the requested path ends in /, nginx tries to serve an index
		#      file if one exists (index directive), or a generated index if
		#      autoindex is enabled, or else responds with 403.
		#
		# The final argument is a fallback and expected to always exist. The
		# default "=404" returns a 404 response to the user.
		#
		try_files $uri $uri/ =404;
	}

	# Packaged applications
	#
	# Some packages might attempt to provide fully-deployed web applications.
	# In these cases, packages are expected to make their application available
	# under a path with the same name.
	#
	#   apt-get install drupal7 -> http://localhost/drupal7
	#
	# For custom applications, it is perfectly acceptable to create a file
	# named apps.d/local_zeplin.conf that provides location ^~ /zeplin { }.
	#
	# See: https://wiki.debian.org/Nginx/DirectoryStructure#appincludes
	#
	include apps.d/*.conf;

	#location ~ \.php$ {
		# Pass the PHP scripts to a FastCGI application server
		# in some cases, "index.php" should be added to the (above) index directive

		# Includes default and suggested FastCGI configuration values
		#include snippets/fastcgi-php.conf;

		# If using php-fpm, this is the default socket location. If you have
		# a different version of php-fpm installed, this may be different.
		#fastcgi_pass unix:/var/run/php7.0-fpm.sock
	#}

	#location ~ /\.ht {
		# If your web application was designed to be run on apache, it likely
		# has .htaccess and possibly a .htpasswd file embedded. It is typically
		# recommended to remove access to these files.

		# If you are using apache as your application server, we strongly
		# recommend looking into uwsgi as an alternative.
		#
		#deny all;
	#}

	#location ~ /\. {
		# As an alternative to the above, it's possible to block access
		# to all hidden directories and files, not just .htaccess/passwd.
		#
		# If choosing this, any hidden directories (such as .well-known,
		# used for letsencrypt) will need to be explicitly allowed.
		#
		# deny all;
	#}

	#location ^~ /.well-known/ {
		# A prefix ( ^~ ) match will take precedence over the regex ( ~ ) match
		# from above. Because nginx will only select one location block per nest,
		# no directives need to be specified here to override deny all from above.
	#}
}


# Virtual Host configuration for example.com
#
# You can create files underneath the sites-available/ directory and symlink to
# them from sites-enabled/. Once nginx has been reloaded, the changes will take
# effect. (service nginx reload)
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri =404;
#	}
#}
